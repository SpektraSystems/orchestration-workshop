#!/bin/bash
# Don't execute this script directly. Use ../trainer instead.

set -e  # if we encounter an error, abort

greet() {
    az account list --output table
}

create_vms() {
    for ((i = 1; i <= $TRAINEE_COUNT; i++))
    do
       
        exists=$(az resource group list --query "[?name=='docker-trainee-$i']" --output table | wc -l)
        if [ $exists == 0 ]; then
            echo "Creating resource group docker-trainee-$i"
            az resource group create -l $AZURE_LOCATION -n docker-trainee-$i
        fi

        echo "Deploying virtual machine instances for trainee $i"
        ts=$(date +"%Y%m%d%H%M%S%3N")
        az resource group deployment create --template-file scripts/trainee-vms.json --parameters "{\"vmsPerTrainee\": {\"value\": $CLUSTER_SIZE }}" -g docker-trainee-$i --name docker-trainee-$i-$ts
    done
}


test_vm() {
    ip=$1
    echo "[[ Testing instance with IP $(tput bold)$ip $(tput sgr0) ]]"
    user=ubuntu

    for cmd in "hostname" \
        "whoami" \
        "hostname -i" \
        "cat /tmp/node" \
        "cat /tmp/ipv4" \
        "cat /etc/hosts" \
        "hostnamectl status" \
        "docker version | grep Version -B1" \
        "docker-compose version" \
        "docker-machine version" \
        "docker images" \
        "docker ps" \
        "curl --silent localhost:55555" \
        "sudo ls -la /mnt/ | grep docker" \
        "env" \
        "ls -la /home/docker/.ssh"; do
        echo "=== $cmd ==="
        echo "$cmd" | 
            ssh -A -q \
                -o "UserKnownHostsFile /dev/null" \
                -o "StrictHostKeyChecking=no" \
                $user@$ip sudo -u docker -i
        echo
    done
}

make_key_name(){
    SHORT_FINGERPRINT=$(ssh-add -l | grep RSA | head -n1 | cut -d " " -f 2 | tr -d : | cut -c 1-8)
    echo "${SHORT_FINGERPRINT}-${USER}"
}

sync_keys() {
    # make sure ssh-add -l contains "RSA"
    ssh-add -l | grep -q RSA ||
        die "The output of \`ssh-add -l\` doesn't contain 'RSA'. Start the agent, add your keys?"

    AWS_KEY_NAME=$(make_key_name)
    echo -n "Syncing keys... "
}

get_token() {
    if [ -z $USER ]; then
        export USER=anonymous
    fi
    date +%Y-%m-%d-%H-%M-$USER
}

make_cards(){
    # Generate cards for a given tag
    TAG=$1
    SETTINGS_FILE=$2
    [[ -z "$SETTINGS_FILE" ]] && {
        echo "Please specify the settings file you want to use."
        echo "e.g.: settings/orchestration.yaml"
        exit 1
    }
    aws_get_instance_ips_by_tag $TAG > tags/$TAG/ips.txt

    # Remove symlinks to old cards
    rm -f ips.html ips.pdf

    # This will generate two files in the base dir: ips.pdf and ips.html
    python scripts/ips-txt-to-html.py $SETTINGS_FILE

    for f in ips.html ips.pdf; do
        # Remove old versions of cards if they exist
        rm -f tags/$TAG/$f

        # Move the generated file and replace it with a symlink
        mv -f $f tags/$TAG/$f && ln -s tags/$TAG/$f $f
    done

    echo "Cards created. You may want to run:"
    echo "chromium ips.html"
    echo "chromium ips.pdf"
}

describe_rg() {
    # Display instance details and reachability/status information
    RG=$1
    need_rg $RG
    echo "============= Resource Group : $RG ============="
    azure_get_instance_ips_by_rg $RG
    #aws_display_instance_statuses_by_tag $TAG
}

run_cli() {
    case "$1" in
    cards)
        TAG=$2
        need_tag $TAG
        make_cards $TAG $3
        ;;
    deploy)
        create_vms
        ;;
    ips)
        RG=$2
        azure_get_instance_ips_by_rg $RG    
        ;;
    list)
        RG=$2
        azure_get_instance_ips_by_rg $RG
        echo ""
        echo "You may be interested in running one of the following commands:"
        echo "./trainer ips $RG"
        ;;
    rgs)
        azure_display_rgs
        ;;
    status)
        greet && echo
        ;;
    start)
        RG=$2
        azure_start_instances_by_rg $RG
        ;;
    stop)
        RG=$2
        azure_stop_instances_by_rg $RG
        ;;
    kill)
        RG=$2
        azure_kill_instances_by_rg $RG
        ;;
    test)    
        need_tag $TAG
        test_tag $TAG
        ;;
    *)
        echo "
./trainer <command> [n-instances|rg] [settings/file.yaml]

Core commands:
  deploy               Deploy and start instances
  start        [RG]    Start instances for all or specific trainee.
  list         [RG]    List instances for all or specific trainee.
  stop         [RG]    Stop instances for all or specific trainee.
  kill         [RG]    Kill instances for all or specific trainee.

Extras:
  ips          [RG]    List all IPs of instances with a given resource group (updates ips.txt)
  status       [RG]    Print information about this resource group and its VMs
  rgs                  List all resource groups

Beta:
"
        ;;
    esac
}

(
    cd $SCRIPT_DIR
    source scripts/cli.sh
    source scripts/azure.sh
    source ../prepare-vms/scripts/rc
    source ../prepare-vms/scripts/colors.sh
    mkdir -p rgs
    # TODO: unset empty envvars
    run_cli "$@"
)
